---

---

<div class="text-center mb-15">
    <h1 class="uppercase text-5xl m-5">Menu de negocio</h1>
</div>
<div class="overflow-x-auto md:overflow-visible">
    <!-- Tabla para escritorio -->
    <table class="hidden md:table w-full border border-gray-300 text-center">
        <thead class="bg-white">
            <tr class="text-[#ff5a5f] font-semibold">
                <th class="border border-gray-300 px-4 py-2">HORA</th>
                <th class="border border-gray-300 px-4 py-2">FECHA</th>
                <th class="border border-gray-300 px-4 py-2">CLIENTE</th>
                <th class="border border-gray-300 px-4 py-2">MENSAJE</th>
                <th class="border border-gray-300 px-4 py-2">CONFIRMACIÓN</th>
                <th class="border border-gray-300 px-4 py-2">CANCELAR</th>
            </tr>
        </thead>
        <tbody id="tabla-body">
            <!-- Se llena dinámicamente -->
        </tbody>
    </table>

    <!-- Vista móvil tipo tarjetas (vacía inicialmente) -->
    <div class="md:hidden space-y-4 p-4" id="contenedor-tarjetas">
        <!-- Se llena dinámicamente -->
    </div>

    <!-- Ver más -->
    <!-- <div class="text-center py-4">
        <span class="text-[#ff5a5f] italic cursor-pointer hover:underline">Ver más...</span>
    </div> -->
</div>

<script>
    import { ruta } from "./Welcome.astro";
    import gsap from "gsap";

    const userid = sessionStorage.getItem("Id");

    fetch(`${ruta}/api/Reservas`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userid }),
    })
        .then((res) => res.json())
        .then((respuesta) => {
            const data = respuesta.data || [];
            const tablaBody = document.getElementById("tabla-body");
            const contenedorTarjetas = document.getElementById(
                "contenedor-tarjetas",
            );

            tablaBody.innerHTML = "";
            contenedorTarjetas.innerHTML = "";

           // console.log(data);
            

            if (data.length === 0) {
                // Mensaje si no hay citas
                contenedorTarjetas.innerHTML = `<p class="text-center text-gray-500">No hay citas registradas</p>`;
                tablaBody.innerHTML = `<tr><td colspan="5" class="text-center text-gray-500">No hay citas registradas</td></tr>`;
                return;
            }

            data.forEach((cita) => {
                let icono;
                const Agid = cita.agenda_id;
                const Useid = cita.usuario_id;
                

                if (cita.estado === "pendiente" || cita.estado === 0) {
                    icono = `<span class="text-yellow-500">PENDIENTE ⏳</span>`; // Amarillo para pendiente
                } else if (cita.estado === "confirmada") {
                    icono = `<span class="text-green-500">CONFIRMADA ✅</span>`; // Verde para confirmado
                } else if (cita.estado === "cancelada") {
                    icono = `<span class="text-red-500">CANCELADA ❌</span>`; // Rojo para cancelada
                } else {
                    icono = `<span class="text-gray-400">DESCONOCIDO ❔</span>`; // Gris para estados desconocidos
                }

                const fechaFormateada = new Date(cita.fecha).toLocaleDateString(
                    "es-ES",
                );

                // Formatear hora a 12h AM/PM y sin segundos
                let horaFormateada = cita.hora;
                if (horaFormateada) {
                    // Si viene como "7:00:00" o "14:30:00"
                    const [h, m] = horaFormateada.split(":");
                    let hour = parseInt(h, 10);
                    const minutes = m;
                    const ampm = hour >= 12 ? "PM" : "AM";
                    hour = hour % 12;
                    if (hour === 0) hour = 12;
                    horaFormateada = `${hour}:${minutes} ${ampm}`;
                }

                // Fila en tabla escritorio
                tablaBody.innerHTML += `
                <tr class="fila">
                    <td class="border border-gray-300 px-4 py-2">${horaFormateada}</td>
                    <td class="border border-gray-300 px-4 py-2">${fechaFormateada}</td>
                    <td class="border border-gray-300 px-4 py-2">${cita.nombre}</td>
                    <td class="border border-gray-300 px-4 py-2">${cita.notas}</td>
                    <td class="border border-gray-300 px-4 py-2">${icono}</td>
                    <td class="border border-gray-300 px-2 py-2"><button  class="bg-red-500 text-white px-1 py-1 rounded" onclick="cancelarCita('${Agid}', '${Useid}')">Cancelar</button></td>
                </tr>
            `;

                // Tarjeta en vista móvil
                contenedorTarjetas.innerHTML += `
                <div class="tarjeta bg-white border border-gray-300 rounded-lg p-4 shadow text-center">
                    <p><span class="font-semibold text-[#ff5a5f]">HORA:</span> ${cita.hora}</p>
                    <p><span class="font-semibold text-[#ff5a5f]">FECHA:</span> ${fechaFormateada}</p>
                    <p><span class="font-semibold text-[#ff5a5f]">CLIENTE:</span> ${cita.nombre}</p>
                    <p><span class="font-semibold text-[#ff5a5f]">MENSAJE:</span> ${cita.notas}</p>
                    <p><span class="font-semibold text-[#ff5a5f]">CONFIRMACIÓN:</span> ${icono}</p>
                    <div class="mt-2">
                        <button class="bg-red-500 text-white px-1 py-1 rounded" onclick="cancelarCita('${Agid}', '${Useid}')">Cancelar</button> 
                    </div>
                </div>
            `;

                async function cancelarCita(Agid,Useid) {
console.log("agendaid "+Agid, "usuario "+Useid);


                    if (!confirm("¿Seguro que quieres cancelar esta cita?"))
                        return;

                    try {
                        const res = await fetch(
                            `${ruta}/api/Reservas/cancelar`,
                            {
                                method: "PUT", // PUT porque estamos actualizando
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ Agid ,Useid }),
                            },
                        );

                        const respuesta = await res.json();

                        if (res.ok) {
                            alert("✅ Cita cancelada con éxito");
                            // Recargar la página para ver el cambio
                            location.reload();
                        } else {
                            alert(
                                "❌ Error al cancelar la cita: " +
                                    (respuesta.message || "Intenta de nuevo"),
                            );
                        }
                    } catch (error) {
                        console.error("Error en cancelarCita:", error);
                        alert("❌ Error de conexión con el servidor");
                    }
                }
                window.cancelarCita = cancelarCita;
            });
            

            // Animación GSAP para filas de tabla
            gsap.from(".fila", {
                opacity: 0,
                y: 30,
                duration: 0.7,
                stagger: 0.12,
                ease: "power2.out",
            });
            // Animación GSAP para tarjetas móviles
            gsap.from(".tarjeta", {
                opacity: 0,
                y: 30,
                duration: 0.7,
                stagger: 0.12,
                ease: "power2.out",
            });
        })
        .catch((error) => {
            console.error(error);
        });
</script>
